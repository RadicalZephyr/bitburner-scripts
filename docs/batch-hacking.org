* Batch Hacking System Architecture

Written by ChatGPT 4o in discussion with Zefira Shannon.

** Overview

The batch hacking system orchestrates coordinated attacks on valid
hacking targets in Bitburner using a structured lifecycle model. It is
designed to optimize RAM usage across all available servers by
managing preparation, maintenance, and harvesting stages
separately. The system uses dedicated scripts for memory allocation,
lifecycle tracking, target evaluation, and batch execution.

The architecture is modular, scalable, and adapts over time as player
hacking skill and network resources improve.
** Components

*** start.ts and bootstrap.ts

start.ts waits for `get-all-hosts.js` to gather server information, sets default configuration values and then launches `bootstrap.js` on a remote host. `bootstrap.ts` starts the supporting services:

- `/batch/memory.js` on `n00dles` which runs the MemoryManager
- `/batch/manage.js` which coordinates prepping and hacking targets
- `/crack-all.js` to open ports
- `/batch/monitor.js` to display status
- registers purchased servers with the memory manager

*** MemoryManager (batch/memory.tsx)

Tracks available RAM on each worker host. Scripts communicate over `MEMORY_PORT` to request and release allocations. A small UI shows reserved and free RAM across all workers.

*** Manager (batch/manage.ts)

Listens on `MANAGER_PORT` for messages from `ManagerClient`. New targets are queued for preparation. The manager launches `/batch/till.js`, `/batch/sow.js` and `/batch/harvest.js` through `batch/launch.ts`. Each phase notifies the manager when it finishes.

*** Monitor (batch/monitor.tsx)

Reads lifecycle updates from `MonitorClient` via `MONITOR_PORT` and displays the state of each server.

*** Worker Scripts

- `till.js` weakens a host until its security hits minimum.
- `sow.js` grows a host to maximum money and weakens again to maintain security.
- `harvest.ts` currently calculates batch sizes but does not yet spawn hacking batches.
- `h.js`, `g.js` and `w.js` perform individual hack, grow and weaken commands.

** Messaging Protocols

Allocation requests sent to the MemoryManager have the form:

#+BEGIN_SRC typescript
interface AllocationRequest {
  returnPort: number;
  pid: number;
  chunkSize: number;
  numChunks: number;
  contiguous?: boolean;
}
#+END_SRC

Memory responses are:

#+BEGIN_SRC typescript
interface AllocationResult {
  allocationId: number;
  hosts: HostAllocation[];
}
#+END_SRC

*** AllocationClaim (from worker script to MemoryManager)
#+BEGIN_SRC typescript
interface AllocationClaim {
  allocationId: number;
  pid: number;
  hostname: string;
  filename: string;
  chunkSize: number;
  numChunks: number;
}
#+END_SRC

*** AllocationRelease (from worker script to MemoryManager)
#+BEGIN_SRC typescript
interface AllocationRelease {
  allocationId: number;
  pid: number;
  hostname: string;
}
#+END_SRC
MemoryManager tracks multiple claims per allocation. When a script
exits or sends an AllocationRelease, only the claimed portion is
released.

Messages to the manager are `[MessageType, hostname]` where the type
is `NewTarget`, `FinishedTilling` or `FinishedSowing`.


** Future Enhancements

The codebase still lacks a full harvesting loop. A future update will add real batch execution and better prioritization of targets.
